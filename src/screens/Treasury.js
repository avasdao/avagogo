/**
 * Sample React Native App
 * https://github.com/facebook/react-native
 *
 * @format
 * @flow strict-local
 */

import React from 'react'

import {
  Pressable,
  SafeAreaView,
  ScrollView,
  StatusBar,
  StyleSheet,
  Text,
  useColorScheme,
  View,
} from 'react-native'

import Ionicons from 'react-native-vector-icons/Ionicons'

import tailwind from 'tailwind-rn'

import LottieView from 'lottie-react-native'

import 'react-native-get-random-values'
import '@ethersproject/shims'
import { ethers, utils, Wallet } from 'ethers'

import moment from 'moment'

import PushNotification from 'react-native-push-notification'

import store from '../store'

const testNotif = () => {
    PushNotification.getChannels(function (channel_ids) {
      console.log('CHANNEL:', channel_ids); // ['channel_id_1']
    })
    // return console.log('SENDING TEST NOTIFICATION');
    PushNotification.localNotification({
      /* Android Only Properties */
      channelId: 'default-channel-id', // (required) channelId, if the channel doesn't exist, notification will not trigger.
      // ticker: 'My Notification Ticker', // (optional)
      // showWhen: true, // (optional) default: true
      // autoCancel: true, // (optional) default: true
      // largeIcon: 'ic_launcher', // (optional) default: 'ic_launcher'. Use '' for no large icon.
      // largeIconUrl: 'https://www.example.tld/picture.jpg', // (optional) default: undefined
      // smallIcon: 'ic_notification', // (optional) default: 'ic_notification' with fallback for 'ic_launcher'. Use '' for default small icon.
      // bigText: 'My big text that will be shown when notification is expanded', // (optional) default: 'message' prop
      // subText: 'This is a subText', // (optional) default: none
      // bigPictureUrl: 'https://www.example.tld/picture.jpg', // (optional) default: undefined
      // bigLargeIcon: 'ic_launcher', // (optional) default: undefined
      // bigLargeIconUrl: 'https://www.example.tld/bigicon.jpg', // (optional) default: undefined
      // color: 'red', // (optional) default: system default
      // vibrate: true, // (optional) default: true
      // vibration: 300, // vibration length in milliseconds, ignored if vibrate=false, default: 1000
      // tag: 'some_tag', // (optional) add tag to message
      // group: 'group', // (optional) add group to message
      // groupSummary: false, // (optional) set this notification to be the group summary for a group of notifications, default: false
      // ongoing: false, // (optional) set whether this is an 'ongoing' notification
      // priority: 'high', // (optional) set notification priority, default: high
      // visibility: 'private', // (optional) set notification visibility, default: private
      // ignoreInForeground: false, // (optional) if true, the notification will not be visible when the app is in the foreground (useful for parity with how iOS notifications appear). should be used in combine with `com.dieam.reactnativepushnotification.notification_foreground` setting
      // shortcutId: 'shortcut-id', // (optional) If this notification is duplicative of a Launcher shortcut, sets the id of the shortcut, in case the Launcher wants to hide the shortcut, default undefined
      // onlyAlertOnce: false, // (optional) alert will open only once with sound and notify, default: false
      //
      // when: null, // (optional) Add a timestamp (Unix timestamp value in milliseconds) pertaining to the notification (usually the time the event occurred). For apps targeting Build.VERSION_CODES.N and above, this time is not shown anymore by default and must be opted into by using `showWhen`, default: null.
      // usesChronometer: false, // (optional) Show the `when` field as a stopwatch. Instead of presenting `when` as a timestamp, the notification will show an automatically updating display of the minutes and seconds since when. Useful when showing an elapsed time (like an ongoing phone call), default: false.
      // timeoutAfter: null, // (optional) Specifies a duration in milliseconds after which this notification should be canceled, if it is not already canceled, default: null
      //
      // messageId: 'google:message_id', // (optional) added as `message_id` to intent extras so opening push notification can find data stored by @react-native-firebase/messaging module.
      //
      // actions: ['Yes', 'No'], // (Android only) See the doc for notification actions to know more
      // invokeApp: true, // (optional) This enable click on actions to bring back the application to foreground or stay in background, default: true

      /* iOS only properties */
      // category: '', // (optional) default: empty string

      /* iOS and Android properties */
      id: 0, // (optional) Valid unique 32 bit integer specified as string. default: Autogenerated Unique ID
      title: 'Bitpawns Update!', // (optional)
      message: 'Introducing an MVP app for Android/iOS', // (required)
      userInfo: {}, // (optional) default: {} (using null throws a JSON value '<null>' error)
      playSound: false, // (optional) default: true
      soundName: 'default', // (optional) Sound to play when the notification is shown. Value of 'default' plays the default sound. It can be set to a custom sound such as 'android.resource://com.xyz/raw/my_sound'. It will look for the 'my_sound' audio file in 'res/raw' directory and play it. default: 'default' (default sound is played)
      number: 10, // (optional) Valid 32 bit integer specified as string. default: none (Cannot be zero)
      // repeatType: 'day', // (optional) Repeating interval. Check 'Repeating Notifications' section for more info.
    })
}

/**
 * Treasury Screen
 */
function Treasury() {
    const [hasAgreed, setHasAgreed] = React.useState(false)
    const [balance, setBalance] = React.useState(0)

    /* Initialize PROFILE context. */
    const {
        wallet,
        createWallet,
    } = React.useContext(store.Profile)

    /* Handle onLoad scripts. */
    React.useEffect(() => {
        /**
         * Fetch Info
         */
        const fetchInfo = async () => {
            console.log('\nTREASURY (wallet):', wallet)

            /* Validate wallet. */
            if (!wallet) {
                /* Create new wallet. */
                const returnedWallet = await createWallet()
                console.log('\nTREASURY (returned wallet)', returnedWallet)
            }

            if (wallet) {
                // Querying the network
                const balance = await wallet.getBalance()
                    .catch(err => console.error(err))
                console.log('\nTREASURY (balance):', balance, moment().unix())

                setBalance(balance)

                const txCount = await wallet.getTransactionCount()
                    .catch(err => console.error(err))
                console.log('\nTREASURY (txs):', txCount, moment().unix())
            }
        }

        /* Fetch info. */
        // fetchInfo()

    }, [wallet])

    return (
        <ScrollView
            contentInsetAdjustmentBehavior="automatic"
            style={tailwind('')}
        >
            {hasAgreed &&
                <View style={tailwind('py-6 items-center')}>
                    <View style={tailwind('bg-pink-200 px-3 py-2 rounded-full')}>
                        <Text style={tailwind('text-pink-800 text-xl font-semibold')}>
                            {balance ? ethers.BigNumber.from(balance).toString() : '0.00' }
                        </Text>
                        <Text style={tailwind('text-pink-800 text-xl font-semibold')}>
                            $0.00
                        </Text>
                    </View>

                    <Pressable
                        style={tailwind('flex')}
                        onPress={testNotif}>
                        <Text style={tailwind('text-gray-700 text-xl')}>Inbox</Text>
                    </Pressable>

                    <View style={tailwind('mt-10 py-5 items-center')}>
                        <LottieView
                            style={tailwind('h-48')}
                            source={require('../assets/lottie/finance-guru.json')} autoPlay loop
                        />

                        <Text style={tailwind('text-purple-700 font-light')}>
                            This area is still under development
                        </Text>
                    </View>

                </View>
            }

            {!hasAgreed &&
                <View>
                    <View style={tailwind('px-5 pt-5 items-center')}>
                        <Text style={tailwind('text-lg text-gray-800 font-bold')}>
                            Welcome to your Treasury!
                        </Text>

                        <Text style={tailwind('mt-3 text-lg text-gray-800')}>
                            This area is where you can easily manage ALL of your assets in one place.
                        </Text>
                    </View>

                    <View style={tailwind('py-5 items-center')}>
                        <LottieView
                            style={tailwind('h-48')}
                            source={require('../assets/lottie/treasure-chest.json')} autoPlay loop
                        />

                        <Text style={tailwind('text-pink-500 font-semibold')}>
                            Your AVAX Treasury
                        </Text>
                    </View>

                    <View style={tailwind('px-5 pt-5')}>
                        <Text style={tailwind('text-sm text-red-500 font-bold')}>
                            !! WARNING !!
                        </Text>

                        <Text style={tailwind('mt-3 text-sm text-gray-800')}>
                            This is a very early (alpha) release of Ava GoGo that is currently using a <Text style={tailwind('font-bold')}>"SHARED"</Text> wallet for ALL demo users.
                        </Text>

                        <Text style={tailwind('mt-3 text-sm text-gray-800')}>
                            Our team has <Text style={tailwind('font-bold')}>10+ years</Text> of experience in building secure crypto wallets.
                            We've carefully implemented an abundance of protections against ANY loss of funds.
                        </Text>

                        <Text style={tailwind('mt-3 text-sm text-gray-800')}>
                            Modenero Corp and the team of Ava GoGo make <Text style={tailwind('font-bold')}>NO GUARANTEE</Text> about the safety and security of the Treasury.
                        </Text>

                        <Text style={tailwind('mt-3 text-sm text-red-500 font-bold')}>
                            !! USE AT YOUR OWN RISK !!
                        </Text>
                    </View>

                    <View style={tailwind('py-6 items-center')}>
                        <Pressable
                            onPress={() => setHasAgreed(true) }
                            style={tailwind('bg-yellow-200 px-10 py-2 border-2 border-yellow-400 rounded-xl')}
                        >
                            <Text style={tailwind('text-yellow-800 text-xl font-semibold')}>
                                Okay, got it!
                            </Text>
                        </Pressable>
                    </View>
                </View>
            }
        </ScrollView>
    )
}

export default Treasury
